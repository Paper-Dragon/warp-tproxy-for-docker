name: build and push image

# Configures this workflow
on:
    push:
        # only run workflow for have a tag
        tags:
            - 'v*.*.*'
    workflow_dispatch:
        inputs:
            tags:
                description: 'Tag for the image'
                required: true
                default: 'v0.0.0-dev'
            gost_url:
                description: 'URL for gost.tar.gz'
                required: false

# Defines two custom environment variables for the workflow. These are used for the Container registry domain, and a name for the Docker image that this workflow builds.
env:
    REGISTRY: ghcr.io
    IMAGE_NAME: ${{ github.repository }}
    IMAGE_TAGS: ${{ github.event.inputs.tags }}
    GOST_URL: ${{ github.event.inputs.gost_url }}

# There is a single job in this workflow. It's configured to run on the latest available version of Ubuntu.
jobs:
    build-and-push-image:
        runs-on: ubuntu-latest
        # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
        permissions:
            contents: read
            packages: write
            #
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            # Download gost.tar.gz from the release or specified URL
            - name: Download gost.tar.gz
              run: |
                  if [ -z "$GOST_URL" ]; then
                      curl -fsSL https://api.github.com/repos/go-gost/gost/releases | jq -r '.[0].assets[] | select(.name | test("linux_amd64.tar.gz")) | .browser_download_url' | xargs -n 1 wget -q -O gost.tar.gz
                  else
                      wget -q -O gost.tar.gz $GOST_URL
                  fi

            # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
            - name: Log in to the Container registry
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
            - name: Extract metadata (tags, labels) for Docker
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
                  # Extracts the version from the tag or uses the input value
                  tags: |
                      type=raw,value=${{ github.event.inputs.tags }},enable=${{ !!github.event.inputs.tags }}
                      type=semver,pattern={{version}},enable=${{ !github.event.inputs.tags }}
                      type=semver,pattern={{major}}.{{minor}},enable=${{ !github.event.inputs.tags }}
                      type=raw,value=latest,enable=${{ !github.event.inputs.tags }}

            # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
            # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
            # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
            - name: Build and push Docker image
              uses: docker/build-push-action@v5
              with:
                  context: .
                  push: true
                  # REGISTRY/REPOSITORY:TAG
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
